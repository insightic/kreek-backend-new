import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { RemoteConnection, RemoteConnectionCreationRequest, RemoteConnectionUpdateRequest, RemoteConnections } from './types';
export interface GetRemoteConnectionsRequest {
    /** The organization ID. */
    orgID: string;
    name?: string;
    remoteURL?: string;
}
export interface PostRemoteConnectionRequest {
    /** entity body */
    body: RemoteConnectionCreationRequest;
    /** If true, validate the remote connection, but don't save it. */
    validate?: any;
}
export interface GetRemoteConnectionByIDRequest {
    remoteID: string;
}
export interface PatchRemoteConnectionByIDRequest {
    remoteID: string;
    /** entity body */
    body: RemoteConnectionUpdateRequest;
    /** If true, validate the updated information, but don't save it. */
    validate?: any;
}
export interface DeleteRemoteConnectionByIDRequest {
    remoteID: string;
}
export interface PostValidateRemoteConnectionByIDRequest {
    remoteID: string;
}
/**
 * Remotes API
 */
export declare class RemotesAPI {
    private base;
    /**
     * Creates RemotesAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List all remote connections.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetRemoteConnections }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getRemoteConnections(request: GetRemoteConnectionsRequest, requestOptions?: RequestOptions): Promise<RemoteConnections>;
    /**
     * Register a new remote connection.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostRemoteConnection }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postRemoteConnection(request: PostRemoteConnectionRequest, requestOptions?: RequestOptions): Promise<RemoteConnection>;
    /**
     * Retrieve a remote connection.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/GetRemoteConnectionByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getRemoteConnectionByID(request: GetRemoteConnectionByIDRequest, requestOptions?: RequestOptions): Promise<RemoteConnection>;
    /**
     * Update a remote connection.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PatchRemoteConnectionByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchRemoteConnectionByID(request: PatchRemoteConnectionByIDRequest, requestOptions?: RequestOptions): Promise<RemoteConnection>;
    /**
     * Delete a remote connection.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/DeleteRemoteConnectionByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteRemoteConnectionByID(request: DeleteRemoteConnectionByIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Validate a remote connection.
     * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostValidateRemoteConnectionByID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postValidateRemoteConnectionByID(request: PostValidateRemoteConnectionByIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=RemotesAPI.d.ts.map